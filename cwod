#!/usr/bin/env python

# Copyright (c) 2013 Tim Fuller

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

import random
import os
import sys
import logging
import argparse
import re
from textwrap import fill as textfill
try:
    from ConfigParser import ConfigParser, NoOptionError
except ImportError:
    from configparser import ConfigParser, NoOptionError


SEP = "|"
def split(string, sep=SEP):
    return [' '.join(x.split()) for x in string.split(SEP) if x.split()]


def parse_bool_expr(expr):
    return {'true': True, 'on': True, '1': True,
            'false': False, 'off': False, '0': False}.get(expr.lower(), False)

class Workout:
    def __init__(self, name, items):

        self.name = name
        self.level = 3
        self.disabled = False
        self.equipment = None

        keys = [x[0] for x in items]
        assert 'type' in keys
        assert 'description' in keys

        for (key, value) in items:
            if key == 'equipment':
                self.equipment = split(value)
            elif key == 'type':
                self.type = value
            elif key == 'disabled':
                self.disabled = parse_bool_expr(value)
            elif key == 'level':
                self.level = int(value)
            else:
                setattr(self, key, value)

    def __str__(self):
        return '{0}: {1}'.format(self.name, self.description)

    @property
    def hangboard_required(self):
        if self.equipment is None:
            return False
        return ('hangboard' in self.equipment or 'fingerboard' in self.equipment)

    @property
    def campus_board_required(self):
        if self.equipment is None:
            return False
        return "campus board" in self.equipment

    @property
    def rope_required(self):
        if self.equipment is None:
            return False
        return 'rope' in self.equipment


def generate_workout_db(filename='daily.cfg'):
    workout_db = []
    config = ConfigParser()
    config.readfp(open(filename))
    for section in config.sections():
        wo = Workout(section, config.items(section))
        if wo.disabled:
            continue
        workout_db.append(wo)
    return workout_db


def msg(message, sp="  "):
    return sp + "\n".join("{0}{1}".format(sp, x)
                          for x in message.split("\n")).strip()


def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]
    parser= argparse.ArgumentParser()
    parser.add_argument("-r", "--rope", action="store_true", default=False,
                        help=("Use activities that require a rope "
                              "[default: %(default)s]"))
    parser.add_argument("-L", "--max-level", action="store", type=int, default=6,
                        help="Max difficulty cut off level [default: %(default)s]")
    parser.add_argument("-l", "--min-level", action="store", type=int, default=0,
                        help="Min difficulty cut off level [default: %(default)s]")
    parser.add_argument("-C", "--campus-board", action="store_true", default=False,
                        help="Use campus board [default: %(default)s]")
    parser.add_argument("-F", "--hangboard", action="store_true", default=False,
                        help="Use fingerboard [default: %(default)s]")
    parser.add_argument("-D", "--duration", action="store", type=float, default=90,
                        help="Duration in minutes [default: %(default)s]")
    parser.add_argument("-S", "--summary", action="store_true", default=False,
                        help="Print summary and exit [default: %(default)s]")
    parser.add_argument("-N", "--num-days", action="store", type=int, default=1,
                        help="Create workout for N days [default: %(default)s]")
    parser.add_argument("-T", "--type", help="Type of workout")
    args = parser.parse_args(argv)

    gen_wo(rope=args.rope, summary=args.summary, campus=args.campus_board,
           fingerboard=args.hangboard, duration=args.duration,
           ndays=args.num_days, type=args.type,
           minlevel=max(0, args.min_level), maxlevel=min(6, args.max_level))


def gen_wo(rope=False, summary=False, campus=False, fingerboard=False,
           duration=90., ndays=1, minlevel=0, maxlevel=6, type=None):
    """Generate a workout of the day

    Parameters
    ----------
    argv : list
        Command line arguments.  Execute

        % cwod -h

        for the complete list of accepted arguments

    """
    logging.basicConfig(level=logging.INFO, format="%(message)s",
                        stream=sys.stdout)

    workout_db = generate_workout_db()

    if summary:
        wo_types = sorted(list(set([x.type for x in workout_db])))
        wo_names = [x.name for x in workout_db]
        logging.info("Workout types: {0}".format(', '.join(wo_types)))
        logging.info("Number of workouts: {0}".format(len(workout_db)))
        s = "Workouts: {0}".format(", ".join(wo_names))
        logging.info(textfill(s, 78, subsequent_indent="   "))
        return 0

    # incompatible options
    if campus and fingerboard and ndays == 1:
        sys.exit("Campus and hangboard workout on the same day? I don't think so!")

    # list of filtered exercises
    xs = []
    for workout in workout_db:

        # prune any requiring rope, unless requested
        if not rope and workout.rope_required:
            continue

        if "conditioning" == workout.type:
            if not campus and workout.campus_board_required:
                continue
            if not fingerboard and workout.hangboard_required:
                continue

        xs.append(workout)
        continue

    for _i in range(ndays):
        logging.info("{1}\nDAY {0}\n{1}".format(_i + 1, "-" * 78))

        # warm up
        # choose from exercises of type "technique"
        # The total warm up accounts for 15% of the workout time
        technique = [x for x in xs if x.type=="technique" or x.type=="warm up"]
        WU = technique[random.randint(0, len(technique) - 1)]
        logging.info(
            "WARM UP, {0} minutes, calisthenics\n"
            "         {0} minutes, {1}\nDESCRIPTION:\n{2}"
            .format(.075 * duration, WU.name, msg(WU.description)))

        # skill building
        # choose from exercises of type "skill"
        # skill building accounts for 10% of the workout time
        skill = [x for x in xs
                 if x.type=="skill" and minlevel < x.level <= maxlevel]
        SB = skill[random.randint(0, len(skill) - 1)]
        logging.info("\nSKILL BUILDING, {0} minutes, {1}\nDESCRIPTION:\n{2}"
                     .format(.1 * duration, SB.name, msg(SB.description)))

        # conditioning
        # choose from exercises of type "conditioning"
        # conditioning accounts for 65% of the workout time
        conditioning_types = ("enduarance", "strength", "power", "conditioning")
        conditioning = [x for x in xs
                        if x.type in conditioning_types
                        and minlevel < x.level <= maxlevel]
        if type is not None:
            conditioning = [x for x in conditioning if x.type == type]

        if not conditioning:
            logging.info("Could not find workout that matched, choosing random\n")
            conditioning = [x for x in xs if x.type in conditioning_types]

        CND = conditioning[random.randint(0, len(conditioning) - 1)]
        logging.info(
            "\nCONDITIONING, {0} minutes, {1}\nTYPE: {2}\nDESCRIPTION:\n{3}"
            .format(.65 * duration, CND.name, CND.type, msg(CND.description)))

        # cool down
        # cool down accounts for 10% of workout time
        logging.info(
            "\nCOOL DOWN, {0} minutes, Easy climbing".format(.1 * duration))

        # summary
        logging.info(
            "\nSUMMARY\nWARM UP: {0}\nSKILL BUILDING: {1}\nCONDITIONING: {2}\n\n"
            .format(WU.name, SB.name, CND.name))

        continue

    return 0


if __name__ == "__main__":
    main(sys.argv[1:])
