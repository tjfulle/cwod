#!/usr/bin/env python

# Copyright (c) 2013 Tim Fuller

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

import random
import os
import sys
import logging
import argparse
import re
from textwrap import fill as textfill
import ConfigParser


SEP = "|"
WO_DB = ConfigParser.ConfigParser()
WO_DB.readfp(open("daily.cfg"))
WORKOUTS = WO_DB.sections()


def disabled(workout):
    try:
        return WO_DB.getboolean(workout, "disabled")
    except ConfigParser.NoOptionError:
        return False


def wotype(workout):
    return WO_DB.get(workout, "type").split(SEP)
TYPES = list(set([wotype(x)[0] for x in WORKOUTS]))


def rope_reqd(workout):
    try:
        return WO_DB.getboolean(workout, "rope_reqd")
    except ConfigParser.NoOptionError:
        return False


def equipment(workout):
    try:
        return WO_DB.get(workout, "equipment", "").split(SEP)
    except:
        return []


def desc(workout):
    return WO_DB.get(workout, "description")


def level(workout):
    return WO_DB.getint(x, "level")


def msg(message, sp="  "):
    return sp + "\n".join("{0}{1}".format(sp, x)
                          for x in message.split("\n")).strip()


def main(argv):
    parser= argparse.ArgumentParser()
    parser.add_argument("-r", action="store_true", default=False,
                        help=("Use activities that require a rope "
                              "[default: %(default)s]"))
    parser.add_argument("-L", action="store", type=int, default=6,
                        help="Max difficulty cut off level [default: %(default)s]")
    parser.add_argument("-l", action="store", type=int, default=0,
                        help="Min difficulty cut off level [default: %(default)s]")
    parser.add_argument("-C", action="store_true", default=False,
                        help="Use campus board [default: %(default)s]")
    parser.add_argument("-F", action="store_true", default=False,
                        help="Use fingerboard [default: %(default)s]")
    parser.add_argument("-D", action="store", type=float, default=90,
                        help="Duration in minutes [default: %(default)s]")
    parser.add_argument("-S", action="store_true", default=False,
                        help="Print summary and exit [default: %(default)s]")
    parser.add_argument("-N", action="store", type=int, default=1,
                        help="Create workout for N days [default: %(default)s]")
    (opts, args) = parser.parse_known_args()

    gen_wo(rope=opts.r, summary=opts.S, campus=opts.C, fingerboard=opts.F,
           duration=opts.D, ndays=opts.N,
           minlevel=max(0, opts.l), maxlevel=min(6, opts.L))


def gen_wo(rope=False, summary=False, campus=False, fingerboard=False,
           duration=90., ndays=1, minlevel=0, maxlevel=6):
    """Generate a workout of the day

    Parameters
    ----------
    argv : list
        Command line arguments.  Execute

        % cwod -h

        for the complete list of accepted arguments

    """
    logging.basicConfig(level=logging.INFO, format="%(message)s")

    if summary:
        logging.info("Workout types: {0}".format(
                ", ".join(sorted(list(set(x.split(SEP)[0] for x in TYPES))))))
        logging.info("Number of workouts {0}".format(len(WORKOUTS)))
        logging.info(textfill("Workouts: {0}".format(", ".join(WORKOUTS)), 78,
                              subsequent_indent="   "))
        return 0


    # incompatible options
    if campus and fingerboard and ndays == 1:
        sys.exit(
            "Campus and hangboard workout on the same day? I don't think so!")

    # list of filtered exercises
    xs = []
    for workout in WORKOUTS:

        if disabled(workout):
            continue

        # prune any requiring rope, unless requested
        if not rope and rope_reqd(workout):
            continue

        if "conditioning" in wotype(workout):
            if not campus and "campus board" in equipment(workout):
                continue
            if not fingerboard and "fingerboard" in equipment(workout):
                continue

        xs.append(workout)
        continue

    for _i in range(ndays):
        logging.info("{1}\nDAY {0}\n{1}".format(_i + 1, "-" * 78))

        # warm up
        # choose from exercises of type "technique"
        # The total warm up accounts for 15% of the workout time
        technique = [x for x in xs if
                     "technique" in wotype(x) or "warm up" in wotype(x) ]
        WU = technique[random.randint(0, len(technique) - 1)]
        logging.info(
            "WARM UP, {0} minutes, calisthenics\n"
            "         {0} minutes, {1}\nDESCRIPTION"
            .format(.075 * duration, WU, msg(desc(WU))))

        # skill building
        # choose from exercises of type "skill"
        # skill building accounts for 10% of the workout time
        skill = [x for x in xs
                 if "skill" in wotype(x) and minlevel < level(x) <= maxlevel]
        SB = skill[random.randint(0, len(skill) - 1)]
        logging.info(
            "\nSKILL BUILDING, {0} minutes, {1}\nDESCRIPTION"
            .format(.1 * duration, SB, msg(desc(SB))))

        # conditioning
        # choose from exercises of type "conditioning"
        # conditioning accounts for 65% of the workout time
        conditioning = [ x for x in xs
            if "conditioning" in wotype(x) and minlevel < level(x) <= maxlevel]

        if not conditioning:
            logging.info(
                "nCould not find workout that matched, choosing random\n")
            conditioning = [x for x in WORKOUTS if "conditioning" in wotype(x)]

        CND = conditioning[random.randint(0, len(conditioning) - 1)]
        C, A = wotype(CND)[0], wotype(CND)[1]
        logging.info(
            "\nCONDITIONING, {0} minutes, {1}\nTYPE: {2}\nDESCRIPTION: {3}"
            .format(.65 * duration, CND, A, msg(desc(CND))))

        # cool down
        # cool down accounts for 10% of workout time
        logging.info(
            "\nCOOL DOWN, {0} minutes, Easy climbing".format(.1 * duration))

        # summary
        logging.info(
            "\nSUMMARY\nWARM UP: {0}\nSKILL BUILDING: {1}\nCONDITIONING: {2}\n\n"
            .format(WU, SB, CND))

        continue

    return 0


if __name__ == "__main__":
    main(sys.argv[1:])
